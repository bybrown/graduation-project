// -------------------------------------------------------------
// 
// File Name: C:\Users\busra\BITIRME\codegen\TransposeDForm_Figure3_GeneratedCode\hdlsrc\TransposeDForm_Figure3_GeneratedCode_fixpt.v
// Created: 2022-02-19 13:37:42
// 
// Generated by MATLAB 9.7, MATLAB Coder 4.3 and HDL Coder 3.15
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y                             ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: TransposeDForm_Figure3_GeneratedCode_fixpt
// Source Path: TransposeDForm_Figure3_GeneratedCode_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TransposeDForm_Figure3_GeneratedCode_fixpt
          (clk,
           reset,
           clk_enable,
           x,
           a1,
           a2,
           a3,
           b0,
           b1,
           b2,
           b3,
           ce_out,
           y);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] x;  // sfix14_En12
  input   signed [13:0] a1;  // sfix14_En15
  input   signed [13:0] a2;  // sfix14_En14
  input   [13:0] a3;  // ufix14_En16
  input   b0;  // ufix1
  input   [1:0] b1;  // ufix2
  input   b2;  // ufix1
  input   b3;  // ufix1
  output  ce_out;
  output  signed [13:0] y;  // sfix14_En11


  wire enb;
  wire signed [13:0] n4_mul;  // sfix14_En12
  wire signed [13:0] p6n4_mul_1;  // sfix14_En12
  wire signed [14:0] p6n4_mul_cast;  // sfix15_En12
  wire signed [13:0] p6n4_mul_cast_1;  // sfix14_En11
  wire signed [13:0] n3_mul;  // sfix14_En12
  wire signed [13:0] p5n3_mul_1;  // sfix14_En12
  wire signed [14:0] p5n3_mul_cast;  // sfix15_En12
  wire signed [13:0] p5n3_mul_cast_1;  // sfix14_En11
  wire signed [13:0] n2_mul;  // sfix14_En11
  wire signed [2:0] p4n2_mul_cast;  // sfix3
  wire signed [16:0] p4n2_mul_mul_temp;  // sfix17_En12
  wire signed [15:0] p4n2_mul_cast_1;  // sfix16_En12
  wire signed [13:0] n1_mul;  // sfix14_En12
  wire signed [13:0] p3n1_mul_1;  // sfix14_En12
  wire signed [14:0] p3n1_mul_cast;  // sfix15_En12
  wire signed [13:0] p3n1_mul_cast_1;  // sfix14_En11
  wire signed [13:0] n8_add;  // sfix14_En11
  wire signed [13:0] n5_mul;  // sfix14_En13
  wire signed [27:0] p9n5_mul_mul_temp;  // sfix28_En26
  wire signed [13:0] p9n5_mul_cast;  // sfix14_En11
  wire signed [13:0] n6_mul;  // sfix14_En12
  wire signed [27:0] p10n6_mul_mul_temp;  // sfix28_En25
  wire signed [13:0] p10n6_mul_cast;  // sfix14_En11
  wire signed [13:0] n7_mul;  // sfix14_En13
  wire signed [14:0] p11n7_mul_cast;  // sfix15_En16
  wire signed [28:0] p11n7_mul_mul_temp;  // sfix29_En27
  wire signed [27:0] p11n7_mul_cast_1;  // sfix28_En27
  wire signed [13:0] p11n7_mul_cast_2;  // sfix14_En11
  wire signed [13:0] tmp;  // sfix14_En12
  wire signed [15:0] p18tmp_add_cast;  // sfix16_En13
  wire signed [15:0] p18tmp_add_cast_1;  // sfix16_En13
  wire signed [15:0] p18tmp_add_temp;  // sfix16_En13
  wire signed [13:0] p18tmp_cast;  // sfix14_En11
  reg signed [13:0] n11_add_reg_1;  // sfix14_En12
  wire signed [13:0] tmp_1;  // sfix14_En12
  wire signed [14:0] p16tmp_add_cast;  // sfix15_En12
  wire signed [14:0] p16tmp_add_cast_1;  // sfix15_En12
  wire signed [14:0] p16tmp_add_temp;  // sfix15_En12
  wire signed [15:0] p16tmp_add_cast_2;  // sfix16_En12
  wire signed [15:0] p16tmp_add_cast_3;  // sfix16_En12
  wire signed [15:0] p16tmp_add_temp_1;  // sfix16_En12
  wire signed [13:0] p16tmp_cast;  // sfix14_En11
  reg signed [13:0] n10_add_reg_1;  // sfix14_En12
  wire signed [13:0] tmp_2;  // sfix14_En11
  wire signed [15:0] p13tmp_add_cast;  // sfix16_En12
  wire signed [15:0] p13tmp_add_cast_1;  // sfix16_En12
  wire signed [15:0] p13tmp_add_temp;  // sfix16_En12
  wire signed [17:0] p13tmp_add_cast_2;  // sfix18_En13
  wire signed [17:0] p13tmp_add_cast_3;  // sfix18_En13
  wire signed [17:0] p13tmp_add_temp_1;  // sfix18_En13
  reg signed [13:0] n9_add_reg_1;  // sfix14_En11
  wire signed [15:0] p8n8_add_add_cast;  // sfix16_En12
  wire signed [15:0] p8n8_add_add_cast_1;  // sfix16_En12
  wire signed [15:0] p8n8_add_add_temp;  // sfix16_En12


  assign p6n4_mul_1 = (b3 == 1'b1 ? x :
              14'sb00000000000000);
  assign p6n4_mul_cast = {p6n4_mul_1[13], p6n4_mul_1};
  assign p6n4_mul_cast_1 = p6n4_mul_cast[14:1];
  assign n4_mul = {p6n4_mul_cast_1[12:0], 1'b0};



  assign enb = clk_enable;

  assign p5n3_mul_1 = (b2 == 1'b1 ? x :
              14'sb00000000000000);
  assign p5n3_mul_cast = {p5n3_mul_1[13], p5n3_mul_1};
  assign p5n3_mul_cast_1 = p5n3_mul_cast[14:1];
  assign n3_mul = {p5n3_mul_cast_1[12:0], 1'b0};



  assign p4n2_mul_cast = {1'b0, b1};
  assign p4n2_mul_mul_temp = x * p4n2_mul_cast;
  assign p4n2_mul_cast_1 = p4n2_mul_mul_temp[15:0];
  assign n2_mul = p4n2_mul_cast_1[14:1];



  // HDL code generation from MATLAB function: TransposeDForm_Figure3_GeneratedCode_fixpt
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 
  //                                                                          %
  // 
  //           Generated by MATLAB 9.7 and Fixed-Point Designer 6.4           %
  // 
  //                                                                          %
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  assign p3n1_mul_1 = (b0 == 1'b1 ? x :
              14'sb00000000000000);
  assign p3n1_mul_cast = {p3n1_mul_1[13], p3n1_mul_1};
  assign p3n1_mul_cast_1 = p3n1_mul_cast[14:1];
  assign n1_mul = {p3n1_mul_cast_1[12:0], 1'b0};



  assign p9n5_mul_mul_temp = a1 * n8_add;
  assign p9n5_mul_cast = {p9n5_mul_mul_temp[27], p9n5_mul_mul_temp[27:15]};
  assign n5_mul = {p9n5_mul_cast[11:0], 2'b00};



  assign p10n6_mul_mul_temp = a2 * n8_add;
  assign p10n6_mul_cast = p10n6_mul_mul_temp[27:14];
  assign n6_mul = {p10n6_mul_cast[12:0], 1'b0};



  assign p11n7_mul_cast = {1'b0, a3};
  assign p11n7_mul_mul_temp = p11n7_mul_cast * n8_add;
  assign p11n7_mul_cast_1 = p11n7_mul_mul_temp[27:0];
  assign p11n7_mul_cast_2 = {{2{p11n7_mul_cast_1[27]}}, p11n7_mul_cast_1[27:16]};
  assign n7_mul = {p11n7_mul_cast_2[11:0], 2'b00};



  assign p18tmp_add_cast = {n4_mul[13], {n4_mul, 1'b0}};
  assign p18tmp_add_cast_1 = {{2{n7_mul[13]}}, n7_mul};
  assign p18tmp_add_temp = p18tmp_add_cast + p18tmp_add_cast_1;
  assign p18tmp_cast = p18tmp_add_temp[15:2];
  assign tmp = {p18tmp_cast[12:0], 1'b0};



  always @(posedge clk or posedge reset)
    begin : n11_add_reg_1_reg_process
      if (reset == 1'b1) begin
        n11_add_reg_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          n11_add_reg_1 <= tmp;
        end
      end
    end



  assign p16tmp_add_cast = {n11_add_reg_1[13], n11_add_reg_1};
  assign p16tmp_add_cast_1 = {n3_mul[13], n3_mul};
  assign p16tmp_add_temp = p16tmp_add_cast + p16tmp_add_cast_1;
  assign p16tmp_add_cast_2 = {p16tmp_add_temp[14], p16tmp_add_temp};
  assign p16tmp_add_cast_3 = {{2{n6_mul[13]}}, n6_mul};
  assign p16tmp_add_temp_1 = p16tmp_add_cast_2 + p16tmp_add_cast_3;
  assign p16tmp_cast = p16tmp_add_temp_1[14:1];
  assign tmp_1 = {p16tmp_cast[12:0], 1'b0};



  always @(posedge clk or posedge reset)
    begin : n10_add_reg_1_reg_process
      if (reset == 1'b1) begin
        n10_add_reg_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          n10_add_reg_1 <= tmp_1;
        end
      end
    end



  assign p13tmp_add_cast = {{2{n10_add_reg_1[13]}}, n10_add_reg_1};
  assign p13tmp_add_cast_1 = {n2_mul[13], {n2_mul, 1'b0}};
  assign p13tmp_add_temp = p13tmp_add_cast + p13tmp_add_cast_1;
  assign p13tmp_add_cast_2 = {p13tmp_add_temp[15], {p13tmp_add_temp, 1'b0}};
  assign p13tmp_add_cast_3 = {{4{n5_mul[13]}}, n5_mul};
  assign p13tmp_add_temp_1 = p13tmp_add_cast_2 + p13tmp_add_cast_3;
  assign tmp_2 = p13tmp_add_temp_1[15:2];



  always @(posedge clk or posedge reset)
    begin : n9_add_reg_1_reg_process
      if (reset == 1'b1) begin
        n9_add_reg_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          n9_add_reg_1 <= tmp_2;
        end
      end
    end



  assign p8n8_add_add_cast = {n9_add_reg_1[13], {n9_add_reg_1, 1'b0}};
  assign p8n8_add_add_cast_1 = {{2{n1_mul[13]}}, n1_mul};
  assign p8n8_add_add_temp = p8n8_add_add_cast + p8n8_add_add_cast_1;
  assign n8_add = p8n8_add_add_temp[14:1];



  assign ce_out = clk_enable;

  assign y = n8_add;

endmodule  // TransposeDForm_Figure3_GeneratedCode_fixpt

