// -------------------------------------------------------------
// 
// File Name: C:\Users\busra\BITIRME\task_17Aralýk\codegen\Cascade_IIR_Figure2_GeneratedCode\hdlsrc\Cascade_IIR_Figure2_GeneratedCode_fixpt.v
// Created: 2022-02-17 20:48:10
// 
// Generated by MATLAB 9.7, MATLAB Coder 4.3 and HDL Coder 3.15
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y                             ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Cascade_IIR_Figure2_GeneratedCode_fixpt
// Source Path: Cascade_IIR_Figure2_GeneratedCode_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Cascade_IIR_Figure2_GeneratedCode_fixpt
          (clk,
           reset,
           clk_enable,
           x,
           a1,
           a2,
           a1_hat,
           a2_hat,
           b0,
           b1,
           b2,
           b0_hat,
           b1_hat,
           b2_hat,
           ce_out,
           y);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] x;  // sfix14_En12
  input   signed [13:0] a1;  // sfix14_En15
  input   signed [13:0] a2;  // sfix14_En14
  input   signed [13:0] a1_hat;  // sfix14_En15
  input   signed [13:0] a2_hat;  // sfix14_En17
  input   b0;  // ufix1
  input   [1:0] b1;  // ufix2
  input   b2;  // ufix1
  input   b0_hat;  // ufix1
  input   [1:0] b1_hat;  // ufix2
  input   b2_hat;  // ufix1
  output  ce_out;
  output  signed [13:0] y;  // sfix14_En9


  wire enb;
  wire signed [13:0] n3_mul;  // sfix14_En12
  wire signed [13:0] p6n3_mul_1;  // sfix14_En12
  wire signed [14:0] p6n3_mul_cast;  // sfix15_En12
  wire signed [13:0] p6n3_mul_cast_1;  // sfix14_En10
  wire signed [13:0] n2_mul;  // sfix14_En11
  wire signed [2:0] p5n2_mul_cast;  // sfix3
  wire signed [16:0] p5n2_mul_mul_temp;  // sfix17_En12
  wire signed [15:0] p5n2_mul_cast_1;  // sfix16_En12
  wire signed [13:0] p5n2_mul_cast_2;  // sfix14_En10
  wire signed [13:0] n1_mul;  // sfix14_En12
  wire signed [13:0] p4n1_mul_1;  // sfix14_En12
  wire signed [14:0] p4n1_mul_cast;  // sfix15_En12
  wire signed [13:0] p4n1_mul_cast_1;  // sfix14_En10
  wire signed [13:0] n11_add;  // sfix14_En11
  wire signed [13:0] n4_mul;  // sfix14_En13
  wire signed [27:0] p9n4_mul_mul_temp;  // sfix28_En26
  wire signed [13:0] p9n4_mul_cast;  // sfix14_En10
  wire signed [13:0] n5_mul;  // sfix14_En12
  wire signed [27:0] p10n5_mul_mul_temp;  // sfix28_En25
  wire signed [13:0] p10n5_mul_cast;  // sfix14_En10
  wire signed [13:0] tmp;  // sfix14_En12
  wire signed [14:0] p17tmp_add_cast;  // sfix15_En12
  wire signed [14:0] p17tmp_add_cast_1;  // sfix15_En12
  wire signed [14:0] p17tmp_add_temp;  // sfix15_En12
  wire signed [13:0] p17tmp_cast;  // sfix14_En9
  reg signed [13:0] n13_add_reg_1;  // sfix14_En12
  wire signed [13:0] tmp_1;  // sfix14_En11
  wire signed [15:0] p15tmp_add_cast;  // sfix16_En12
  wire signed [15:0] p15tmp_add_cast_1;  // sfix16_En12
  wire signed [15:0] p15tmp_add_temp;  // sfix16_En12
  wire signed [17:0] p15tmp_add_cast_2;  // sfix18_En13
  wire signed [17:0] p15tmp_add_cast_3;  // sfix18_En13
  wire signed [17:0] p15tmp_add_temp_1;  // sfix18_En13
  wire signed [13:0] p15tmp_cast;  // sfix14_En9
  reg signed [13:0] n12_add_reg_1;  // sfix14_En11
  wire signed [15:0] p8n11_add_add_cast;  // sfix16_En12
  wire signed [15:0] p8n11_add_add_cast_1;  // sfix16_En12
  wire signed [15:0] p8n11_add_add_temp;  // sfix16_En12
  wire signed [13:0] p8n11_add_cast;  // sfix14_En9
  wire signed [13:0] n8_mul;  // sfix14_En11
  wire signed [13:0] p13n8_mul_1;  // sfix14_En11
  wire signed [14:0] p13n8_mul_cast;  // sfix15_En11
  wire signed [13:0] p13n8_mul_cast_1;  // sfix14_En10
  wire signed [13:0] n7_mul;  // sfix14_En10
  wire signed [2:0] p12n7_mul_cast;  // sfix3
  wire signed [16:0] p12n7_mul_mul_temp;  // sfix17_En11
  wire signed [15:0] p12n7_mul_cast_1;  // sfix16_En11
  wire signed [13:0] n6_mul;  // sfix14_En11
  wire signed [13:0] p11n6_mul_1;  // sfix14_En11
  wire signed [14:0] p11n6_mul_cast;  // sfix15_En11
  wire signed [13:0] p11n6_mul_cast_1;  // sfix14_En10
  wire signed [13:0] n14_add;  // sfix14_En9
  wire signed [13:0] n9_mul;  // sfix14_En12
  wire signed [27:0] p21n9_mul_mul_temp;  // sfix28_En24
  wire signed [13:0] p21n9_mul_cast;  // sfix14_En10
  wire signed [13:0] n10_mul;  // sfix14_En14
  wire signed [27:0] p22n10_mul_mul_temp;  // sfix28_En26
  wire signed [13:0] p22n10_mul_cast;  // sfix14_En10
  wire signed [13:0] tmp_2;  // sfix14_En11
  wire signed [17:0] p26tmp_add_cast;  // sfix18_En14
  wire signed [17:0] p26tmp_add_cast_1;  // sfix18_En14
  wire signed [17:0] p26tmp_add_temp;  // sfix18_En14
  wire signed [13:0] p26tmp_cast;  // sfix14_En9
  reg signed [13:0] n16_add_reg_1;  // sfix14_En11
  wire signed [13:0] tmp_3;  // sfix14_En9
  wire signed [15:0] p24tmp_add_cast;  // sfix16_En11
  wire signed [15:0] p24tmp_add_cast_1;  // sfix16_En11
  wire signed [15:0] p24tmp_add_temp;  // sfix16_En11
  wire signed [17:0] p24tmp_add_cast_2;  // sfix18_En12
  wire signed [17:0] p24tmp_add_cast_3;  // sfix18_En12
  wire signed [17:0] p24tmp_add_temp_1;  // sfix18_En12
  reg signed [13:0] n15_add_reg_1;  // sfix14_En9
  wire signed [16:0] p20n14_add_add_cast;  // sfix17_En11
  wire signed [16:0] p20n14_add_add_cast_1;  // sfix17_En11
  wire signed [16:0] p20n14_add_add_temp;  // sfix17_En11


  assign p6n3_mul_1 = (b2 == 1'b1 ? x :
              14'sb00000000000000);
  assign p6n3_mul_cast = {p6n3_mul_1[13], p6n3_mul_1};
  assign p6n3_mul_cast_1 = {p6n3_mul_cast[14], p6n3_mul_cast[14:2]};
  assign n3_mul = {p6n3_mul_cast_1[11:0], 2'b00};



  assign enb = clk_enable;

  assign p5n2_mul_cast = {1'b0, b1};
  assign p5n2_mul_mul_temp = x * p5n2_mul_cast;
  assign p5n2_mul_cast_1 = p5n2_mul_mul_temp[15:0];
  assign p5n2_mul_cast_2 = p5n2_mul_cast_1[15:2];
  assign n2_mul = {p5n2_mul_cast_2[12:0], 1'b0};



  // HDL code generation from MATLAB function: Cascade_IIR_Figure2_GeneratedCode_fixpt
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 
  //                                                                          %
  // 
  //           Generated by MATLAB 9.7 and Fixed-Point Designer 6.4           %
  // 
  //                                                                          %
  // 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  assign p4n1_mul_1 = (b0 == 1'b1 ? x :
              14'sb00000000000000);
  assign p4n1_mul_cast = {p4n1_mul_1[13], p4n1_mul_1};
  assign p4n1_mul_cast_1 = {p4n1_mul_cast[14], p4n1_mul_cast[14:2]};
  assign n1_mul = {p4n1_mul_cast_1[11:0], 2'b00};



  assign p9n4_mul_mul_temp = n11_add * a1;
  assign p9n4_mul_cast = {{2{p9n4_mul_mul_temp[27]}}, p9n4_mul_mul_temp[27:16]};
  assign n4_mul = {p9n4_mul_cast[10:0], 3'b000};



  assign p10n5_mul_mul_temp = n11_add * a2;
  assign p10n5_mul_cast = {p10n5_mul_mul_temp[27], p10n5_mul_mul_temp[27:15]};
  assign n5_mul = {p10n5_mul_cast[11:0], 2'b00};



  assign p17tmp_add_cast = {n3_mul[13], n3_mul};
  assign p17tmp_add_cast_1 = {n5_mul[13], n5_mul};
  assign p17tmp_add_temp = p17tmp_add_cast + p17tmp_add_cast_1;
  assign p17tmp_cast = {{2{p17tmp_add_temp[14]}}, p17tmp_add_temp[14:3]};
  assign tmp = {p17tmp_cast[10:0], 3'b000};



  always @(posedge clk or posedge reset)
    begin : n13_add_reg_1_reg_process
      if (reset == 1'b1) begin
        n13_add_reg_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          n13_add_reg_1 <= tmp;
        end
      end
    end



  assign p15tmp_add_cast = {{2{n13_add_reg_1[13]}}, n13_add_reg_1};
  assign p15tmp_add_cast_1 = {n2_mul[13], {n2_mul, 1'b0}};
  assign p15tmp_add_temp = p15tmp_add_cast + p15tmp_add_cast_1;
  assign p15tmp_add_cast_2 = {p15tmp_add_temp[15], {p15tmp_add_temp, 1'b0}};
  assign p15tmp_add_cast_3 = {{4{n4_mul[13]}}, n4_mul};
  assign p15tmp_add_temp_1 = p15tmp_add_cast_2 + p15tmp_add_cast_3;
  assign p15tmp_cast = p15tmp_add_temp_1[17:4];
  assign tmp_1 = {p15tmp_cast[11:0], 2'b00};



  always @(posedge clk or posedge reset)
    begin : n12_add_reg_1_reg_process
      if (reset == 1'b1) begin
        n12_add_reg_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          n12_add_reg_1 <= tmp_1;
        end
      end
    end



  assign p8n11_add_add_cast = {n12_add_reg_1[13], {n12_add_reg_1, 1'b0}};
  assign p8n11_add_add_cast_1 = {{2{n1_mul[13]}}, n1_mul};
  assign p8n11_add_add_temp = p8n11_add_add_cast + p8n11_add_add_cast_1;
  assign p8n11_add_cast = {p8n11_add_add_temp[15], p8n11_add_add_temp[15:3]};
  assign n11_add = {p8n11_add_cast[11:0], 2'b00};



  assign p13n8_mul_1 = (b2_hat == 1'b1 ? n11_add :
              14'sb00000000000000);
  assign p13n8_mul_cast = {p13n8_mul_1[13], p13n8_mul_1};
  assign p13n8_mul_cast_1 = p13n8_mul_cast[14:1];
  assign n8_mul = {p13n8_mul_cast_1[12:0], 1'b0};



  assign p12n7_mul_cast = {1'b0, b1_hat};
  assign p12n7_mul_mul_temp = n11_add * p12n7_mul_cast;
  assign p12n7_mul_cast_1 = p12n7_mul_mul_temp[15:0];
  assign n7_mul = p12n7_mul_cast_1[14:1];



  assign p11n6_mul_1 = (b0_hat == 1'b1 ? n11_add :
              14'sb00000000000000);
  assign p11n6_mul_cast = {p11n6_mul_1[13], p11n6_mul_1};
  assign p11n6_mul_cast_1 = p11n6_mul_cast[14:1];
  assign n6_mul = {p11n6_mul_cast_1[12:0], 1'b0};



  assign p21n9_mul_mul_temp = n14_add * a1_hat;
  assign p21n9_mul_cast = p21n9_mul_mul_temp[27:14];
  assign n9_mul = {p21n9_mul_cast[11:0], 2'b00};



  assign p22n10_mul_mul_temp = n14_add * a2_hat;
  assign p22n10_mul_cast = {{2{p22n10_mul_mul_temp[27]}}, p22n10_mul_mul_temp[27:16]};
  assign n10_mul = {p22n10_mul_cast[9:0], 4'b0000};



  assign p26tmp_add_cast = {n8_mul[13], {n8_mul, 3'b000}};
  assign p26tmp_add_cast_1 = {{4{n10_mul[13]}}, n10_mul};
  assign p26tmp_add_temp = p26tmp_add_cast + p26tmp_add_cast_1;
  assign p26tmp_cast = {p26tmp_add_temp[17], p26tmp_add_temp[17:5]};
  assign tmp_2 = {p26tmp_cast[11:0], 2'b00};



  always @(posedge clk or posedge reset)
    begin : n16_add_reg_1_reg_process
      if (reset == 1'b1) begin
        n16_add_reg_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          n16_add_reg_1 <= tmp_2;
        end
      end
    end



  assign p24tmp_add_cast = {{2{n16_add_reg_1[13]}}, n16_add_reg_1};
  assign p24tmp_add_cast_1 = {n7_mul[13], {n7_mul, 1'b0}};
  assign p24tmp_add_temp = p24tmp_add_cast + p24tmp_add_cast_1;
  assign p24tmp_add_cast_2 = {p24tmp_add_temp[15], {p24tmp_add_temp, 1'b0}};
  assign p24tmp_add_cast_3 = {{4{n9_mul[13]}}, n9_mul};
  assign p24tmp_add_temp_1 = p24tmp_add_cast_2 + p24tmp_add_cast_3;
  assign tmp_3 = p24tmp_add_temp_1[16:3];



  always @(posedge clk or posedge reset)
    begin : n15_add_reg_1_reg_process
      if (reset == 1'b1) begin
        n15_add_reg_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          n15_add_reg_1 <= tmp_3;
        end
      end
    end



  assign p20n14_add_add_cast = {n15_add_reg_1[13], {n15_add_reg_1, 2'b00}};
  assign p20n14_add_add_cast_1 = {{3{n6_mul[13]}}, n6_mul};
  assign p20n14_add_add_temp = p20n14_add_add_cast + p20n14_add_add_cast_1;
  assign n14_add = p20n14_add_add_temp[15:2];



  assign ce_out = clk_enable;

  assign y = n14_add;

endmodule  // Cascade_IIR_Figure2_GeneratedCode_fixpt

